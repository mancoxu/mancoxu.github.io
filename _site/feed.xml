<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mancoxu</title>
    <description>Manco's blog,use Jekyll and github pages.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 10 Feb 2017 15:51:03 +0800</pubDate>
    <lastBuildDate>Fri, 10 Feb 2017 15:51:03 +0800</lastBuildDate>
    <generator>Jekyll v3.4.0</generator>
    
      <item>
        <title>Git 命令及建议</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/QRZsSQI.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这篇文章的目的是给经常使用git管理项目提供一个有益的提醒。如果你是git新手，可以先阅读文后的引用部分，然后在回头阅读此篇文章。在介绍git命令之前，你可以先看看来自 &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh/wiki/Cheatsheet#git&quot;&gt;on-my-zsh&lt;/a&gt; 提供的别名。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;基本命令&quot;&gt;基本命令&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git config --global user.name&lt;/code&gt;  “Your Name”&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git config --global user.email&lt;/code&gt;  “youremail@example.com”&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git config --global core.editor&lt;/code&gt;  &lt;your favorite=&quot;&quot; editor=&quot;&quot; here=&quot;&quot;&gt;
&lt;/your&gt;    &lt;ul&gt;
      &lt;li&gt;Ex: &lt;code class=&quot;highlighter-rouge&quot;&gt;git config --global core.editor vim&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git init：&lt;/code&gt; 初始化一个repo。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;commit-结构&quot;&gt;Commit 结构&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git status(gst)：&lt;/code&gt; 查看 repo 状态&lt;/li&gt;
  &lt;li&gt;工作区：
    &lt;ul&gt;
      &lt;li&gt;.git 目录&lt;/li&gt;
      &lt;li&gt;暂存区&lt;/li&gt;
      &lt;li&gt;工作目录&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/B0w11nb.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add &amp;lt;filename&amp;gt;(ga)：&lt;/code&gt; 添加一个文件到暂存区&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add .(gaa)：&lt;/code&gt; 添加所有文件到暂存区&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add *.js：&lt;/code&gt; 添加所有后缀为js的文件到暂存区&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git rm --cached &amp;lt;file&amp;gt;：&lt;/code&gt; 从暂存区删除一个新文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &quot;My first commit&quot;(gcmsg)：&lt;/code&gt; 创建一次带 message 的提交&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -v -a(gca)：&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt; 是 verbose 的缩写，会在底部显示差异信息和更多有意义的信息&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-a&lt;/code&gt; 类似于 git add .，会添加所有被修改和删除的文件，但会忽略新创建的文件&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git help &amp;lt;command&amp;gt;：&lt;/code&gt; 查看对应命令的帮助手册&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log(glg,glgg,glo, glog)：&lt;/code&gt; 查看项目的提交历史&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;暂存区管理&quot;&gt;暂存区管理&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git reset HEAD &amp;lt;filename&amp;gt;(grh)：&lt;/code&gt;从暂存区删除一个被修改的文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git reset HEAD(grh)：&lt;/code&gt;从暂存区删除所有被修改的文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout &amp;lt;filename&amp;gt;(gco)：&lt;/code&gt;从暂存区删除一个被修改的文件，并撤销文件的更改&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &quot;My first commit&quot; --amend：&lt;/code&gt;添加文件/更改在暂存区的最后一次提交&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -v -a --amend(gca!)：&lt;/code&gt;添加文件/更改在暂存区的最后一次提交&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore：&lt;/code&gt;告诉git，哪些文件不被加入版本跟踪
    &lt;ul&gt;
      &lt;li&gt;可以使用 git add &lt;filename&gt; -f 命令添加一个不被版本跟踪的文件&lt;/filename&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff &amp;lt;filename&amp;gt;(gd)：&lt;/code&gt;查看基于当前文件的最后一次提交的更改差异&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff (gd)：&lt;/code&gt;查看基于所有文件的最后一次提交的更改差异&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git reset HEAD~2 --soft：&lt;/code&gt;从项目提交历史中删除最近两次提交，但不丢弃文件的更改&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git reset HEAD~2 --hard：&lt;/code&gt;从项目提交历史中删除最近两次提交，但会丢弃文件的更改和在(最后两次)提交中创建的新文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git reset &amp;lt;commit&amp;gt; --soft --hard：&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--soft：&lt;/code&gt;将所有被更改的文件回溯到“待提交”状态&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--hard：&lt;/code&gt;commit 之后，对被git追踪的文件的任何更改都被丢弃&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git reflog：&lt;/code&gt;显示包括”被撤销”在内的所有提交&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge &amp;lt;commit hash&amp;gt;：&lt;/code&gt;重新提交(restore the commit)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git clean -f：&lt;/code&gt;删除工作目录中不被git进行版本追踪的文件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;stashed--branches&quot;&gt;Stashed &amp;amp; Branches&lt;/h3&gt;

&lt;h4 id=&quot;stash&quot;&gt;Stash&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git stash(gsta)：&lt;/code&gt; 将所有暂存区的文件移动到“储藏区”，类似于另一种类型的工作区&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git stash list：&lt;/code&gt; 查看储藏队列(Stash lists)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git stash apply：&lt;/code&gt; 将最近一次储藏恢复到暂存区(可以用类似 git stash apply stash@{num}(num从0开始计数) 的命令来使用在队列中的任意一个储藏(stashes))&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git stash clear：&lt;/code&gt; 清空储藏队列&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git stash save &quot;name of the stash&quot;：&lt;/code&gt; 为储藏设置命名&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git stash pop(gstp)：&lt;/code&gt; 将最近一次储藏恢复到暂存区并从储藏队列删除此储藏&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git stash drop(gstd)：&lt;/code&gt; 从储藏队列删除最近一次储藏(stash@{0})(git stash drop stash@{num} 从储藏队列删除指定储藏)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;branch&quot;&gt;Branch&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout -b dev(gco)：&lt;/code&gt; 创建 dev 分支并从当前分支切换到 dev 分支&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git branch(gb)：&lt;/code&gt; 查看所有分支&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout master(gcm)：&lt;/code&gt; 切换到主分支&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge &amp;lt;branch&amp;gt;(gm)：&lt;/code&gt; 合并分支&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase master：&lt;/code&gt; 先将 master 上的更改合并到当前分支，再添加当前分支的更改。如果有冲突，解决冲突后加 –continue 参数继续合并&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git branch -d &amp;lt;branch&amp;gt;：&lt;/code&gt;  删除分支，-D 则强制删除分支&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge &amp;lt;branch&amp;gt; --squash：&lt;/code&gt; 将多次提交合并成一个，其流程如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;
	# Go to the `master` branch
	git checkout master
	# Create a temp branch
	git checkout -b temp
	# Merge the feature/x branch into the temp using --squash
	git merge feature/x --squash
	# See the new modifications/files in the Staging Area
	git status
	# Create the unified commit
	git commit -m &quot;Add feature/x&quot;
	# Delete the feature/x branch
	git branch -D feature/x

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;rebase 和 merge 的区别：
    &lt;ul&gt;
      &lt;li&gt;rebase:
        &lt;ul&gt;
          &lt;li&gt;提交历史(的展示)是线性的&lt;/li&gt;
          &lt;li&gt;缺点：会删除最近一个 commit，然后创建一次新的 commit&lt;/li&gt;
          &lt;li&gt;如果已提交到远程，不要使用 rebase&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;merge:
        &lt;ul&gt;
          &lt;li&gt;提交历史(的展示)是分叉的&lt;/li&gt;
          &lt;li&gt;对于两个分支的合并，会创建一个次新的 commit&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;远程仓库管理&quot;&gt;远程仓库管理&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git remote add &amp;lt;name&amp;gt; &amp;lt;url&amp;gt;：&lt;/code&gt; 添加一个将被追踪的远程仓库&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git remote rm &amp;lt;name&amp;gt;：&lt;/code&gt; 移除一个远程仓库&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push &amp;lt;remote&amp;gt; &amp;lt;remote-branch&amp;gt;(gp,ggp)：&lt;/code&gt; 将当前分支的本地 commit 推送到远程仓库&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git fetch &amp;lt;remote&amp;gt; &amp;lt;remote-branch&amp;gt;：&lt;/code&gt; 拉取远程仓库的最新 commit 到当前(本地)分支(&lt;remote&gt;/&lt;branch&gt;)，不会合并&lt;/branch&gt;&lt;/remote&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git pull &amp;lt;remote&amp;gt; &amp;lt;remote-branch&amp;gt;(gl,ggl)：&lt;/code&gt; 拉取远程仓库的最新 commit 到当前(本地)分支，并自动 merge
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git pull --rebase(gup)：&lt;/code&gt; 以 rebase 的方式进行合并，而不是 merge&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;其它有用的命令&quot;&gt;其它有用的命令&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git tag &amp;lt;name&amp;gt;：&lt;/code&gt; 创建一个 tag(如：v1.3)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push --tags：&lt;/code&gt; 将本地 tags 推送到远程仓库&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push &amp;lt;tag&amp;gt;：&lt;/code&gt; 推送指定的本地 tag 到远程&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;引用&quot;&gt;引用&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.akitaonrails.com/2010/08/17/screencast-comecando-com-git&quot;&gt;Comecando com git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nvie.com/posts/a-successful-git-branching-model/&quot;&gt;A successful Git branching model&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.atlassian.com/git/tutorials/comparing-workflows/&quot;&gt;Comparing workflows&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://danielkummer.github.io/git-flow-cheatsheet/&quot;&gt;git-flow cheatsheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/open-source-society/computer-science#prerequisite&quot;&gt;Resource to learn git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ericdouglas/dev-log/blob/master/source/git.md&quot;&gt;More resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文参考 &lt;a href=&quot;https://ericdouglas.github.io/2016/04/01/Git-Useful-Tips/&quot;&gt;Git - Useful Tips&lt;/a&gt; 一文翻译，不当之处，敬请谅解!&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/git/2017/02/10/git%E5%91%BD%E4%BB%A4%E5%8F%8A%E5%BB%BA%E8%AE%AE.html</link>
        <guid isPermaLink="true">http://localhost:4000/git/2017/02/10/git%E5%91%BD%E4%BB%A4%E5%8F%8A%E5%BB%BA%E8%AE%AE.html</guid>
        
        <category>Git</category>
        
        
        <category>Git</category>
        
      </item>
    
      <item>
        <title>我的博客</title>
        <description>&lt;p&gt;博客搭建成功，恭喜恭喜!&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/life/2017/02/09/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2.html</link>
        <guid isPermaLink="true">http://localhost:4000/life/2017/02/09/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2.html</guid>
        
        <category>me</category>
        
        
        <category>Life</category>
        
      </item>
    
  </channel>
</rss>
